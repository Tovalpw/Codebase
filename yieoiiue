terraform {
  required_providers {
    digitalocean = {
      source  = "digitalocean/digitalocean"
      version = "~> 2.0"
    }
  }

  backend "s3" {
    bucket                  = "newsblur.terraform"
    key                     = "newsblur.terraform.tfstate"
    region                  = "us-east-1"
    shared_credentials_file = "/srv/secrets-newsblur/keys/aws.s3.token"
  }
}

provider "digitalocean" {
  token = trimspace(file("/srv/secrets-newsblur/keys/digital_ocean.token"))
}

resource "digitalocean_ssh_key" "default" {
  name       = "NB_SSH_Key"
  public_key = file("/srv/secrets-newsblur/keys/docker.key.pub")
}

# resource "digitalocean_project" "NewsBlur_Docker" {
#   name        = "NewsBlur Docker"
#   environment = "Production"
#   description = "Infrastructure glued together with consul"
# }

# resource "digitalocean_project_resources" "NewsBlur_Docker" {
#   project = digitalocean_project.NewsBlur_Docker.id
#   resources = flatten([
#     digitalocean_droplet.db-consul.*.urn, 
#     digitalocean_droplet.www.*.urn,
#     digitalocean_droplet.app-django.*.urn, 
#     digitalocean_droplet.app-counts.*.urn, 
#     digitalocean_droplet.app-push.*.urn, 
#     digitalocean_droplet.app-refresh.*.urn, 
#     digitalocean_droplet.blog.*.urn, 
#     digitalocean_droplet.staging-web.*.urn, 
#     digitalocean_droplet.discovery.*.urn, 
#     digitalocean_droplet.node-text.*.urn, 
#     digitalocean_droplet.node-socket.*.urn, 
#     digitalocean_droplet.node-favicons.*.urn, 
#     digitalocean_droplet.node-images.*.urn, 
#     digitalocean_droplet.node-page.*.urn, 
#     digitalocean_droplet.db-elasticsearch.*.urn, 
#     digitalocean_droplet.db-redis-user.*.urn, 
#     digitalocean_droplet.db-redis-sessions.*.urn, 
#     digitalocean_droplet.db-redis-story.*.urn, 
#     digitalocean_droplet.db-redis-pubsub.*.urn, 
#     digitalocean_droplet.db-postgres.*.urn, 
#     digitalocean_droplet.db-mongo-primary.*.urn, 
#     digitalocean_droplet.db-mongo-secondary.*.urn, 
#     digitalocean_droplet.db-mongo-analytics.*.urn, 
#     digitalocean_droplet.db-metrics.*.urn, 
#     digitalocean_droplet.db-sentry.*.urn, 
#     digitalocean_droplet.task-celery.*.urn, 
#     digitalocean_droplet.task-work.*.urn
#   ])
# }

# #################
# #   Resources   #
# #################

resource "digitalocean_droplet" "db-consul" {
  count    = 3
  image    = var.droplet_os
  name     = "db-consul${count.index + 1}"
  region   = var.droplet_region
  size     = var.droplet_size
  ssh_keys = [digitalocean_ssh_key.default.fingerprint]
  provisioner "local-exec" {
    command = "/srv/newsblur/ansible/utils/generate_inventory.py; sleep 120"
  }
  provisioner "local-exec" {
    command = "cd ..; ANSIBLE_FORCE_COLOR=1 ansible-playbook -l ${self.name} ansible/playbooks/setup_root.yml"
  }
  provisioner "local-exec" {
    command = "cd ..; ANSIBLE_FORCE_COLOR=1 ansible-playbook -l ${self.name} ansible/setup.yml"
  }
}

resource "digitalocean_droplet" "www" {
  count    = 1
  image    = var.droplet_os
  name     = "www${count.index + 2}"
  region   = var.droplet_region
  size     = var.droplet_size_15
  ssh_keys = [digitalocean_ssh_key.default.fingerprint]
  provisioner "local-exec" {
    command = "/srv/newsblur/ansible/utils/generate_inventory.py; sleep 120"
  }
  provisioner "local-exec" {
    command = "cd ..; ANSIBLE_FORCE_COLOR=1 ansible-playbook -l ${self.name} ansible/playbooks/setup_root.yml"
  }
  provisioner "local-exec" {
    command = "cd ..; ANSIBLE_FORCE_COLOR=1 ansible-playbook -l ${self.name} ansible/setup.yml"
  }
}

resource "digitalocean_droplet" "app-django" {
  count    = 9
  image    = var.droplet_os
  name     = "app-django${count.index + 1}"
  region   = var.droplet_region
  size     = var.droplet_size_15
  ssh_keys = [digitalocean_ssh_key.default.fingerprint]
  provisioner "local-exec" {
    command = "/srv/newsblur/ansible/utils/generate_inventory.py; sleep 120"
  }
  provisioner "local-exec" {
    command = "cd ..; ANSIBLE_FORCE_COLOR=1 ansible-playbook -l ${self.name} ansible/playbooks/setup_root.yml"
  }
  provisioner "local-exec" {
    command = "cd ..; ANSIBLE_FORCE_COLOR=1 ansible-playbook -l ${self.name} ansible/setup.yml"
  }
}

resource "digitalocean_droplet" "app-counts" {
  count    = 2
  image    = var.droplet_os
  name     = "app-counts${count.index + 1}"
  region   = var.droplet_region
  size     = var.droplet_size_15
  ssh_keys = [digitalocean_ssh_key.default.fingerprint]
  provisioner "local-exec" {
    command = "/srv/newsblur/ansible/utils/generate_inventory.py; sleep 120"
  }
  provisioner "local-exec" {
    command = "cd ..; ANSIBLE_FORCE_COLOR=1 ansible-playbook -l ${self.name} ansible/playbooks/setup_root.yml"
  }
  provisioner "local-exec" {
    command = "cd ..; ANSIBLE_FORCE_COLOR=1 ansible-playbook -l ${self.name} ansible/setup.yml"
  }
}

resource "digitalocean_droplet" "app-push" {
  count    = 2
  image    = var.droplet_os
  name     = "app-push${count.index + 1}"
  region   = var.droplet_region
  size     = var.droplet_size
  ssh_keys = [digitalocean_ssh_key.default.fingerprint]
  provisioner "local-exec" {
    command = "/srv/newsblur/ansible/utils/generate_inventory.py; sleep 120"
  }
  provisioner "local-exec" {
    command = "cd ..; ANSIBLE_FORCE_COLOR=1 ansible-playbook -l ${self.name} ansible/playbooks/setup_root.yml"
  }
  provisioner "local-exec" {
    command = "cd ..; ANSIBLE_FORCE_COLOR=1 ansible-playbook -l ${self.name} ansible/setup.yml"
  }
}
